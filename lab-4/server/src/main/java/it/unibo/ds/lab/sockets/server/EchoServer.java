/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unibo.ds.lab.sockets.server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.Executors;

public class EchoServer {

    public static void main(String[] args) {
        int port = Integer.parseInt(args[0]);
        try {
            listen(port);
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public static void listen(int port) throws IOException {
        var server = new ServerSocket();
        var executor = Executors.newCachedThreadPool();

        // reserve the port
        server.bind(new InetSocketAddress(port));
        System.out.printf("Bound to port %d\n", port);

        // TODO: start waiting for the standard input to be closed, then terminate the server
        ShutdownWaiter waiter = new ShutdownWaiter();
        waiter.start();

        while (!server.isClosed()) {
            // accept incoming connections
            Socket client = server.accept();
            System.out.printf("Accepted connection from: %s, on local port %d\n", client.getRemoteSocketAddress(), port);
            // serve them
            executor.execute(() -> {
                try {
                    serve(client);
                } catch (IOException e) {
                    // what shall we do if IOException occurs during client interaction?
                    e.printStackTrace();
                }
            });
        }
    }

    private static final int BUFFER_SIZE = 2048;

    private static void serve(Socket client) throws IOException {
        byte[] buffer = new byte[BUFFER_SIZE];
        while (true) {
            int readBytes = client.getInputStream().read(buffer);
            if (readBytes < 0) {
                // nothing to send back to the client, close the output stream
                client.shutdownOutput();
                System.out.printf("End of interaction with %s\n", client.getRemoteSocketAddress());
                break;
            } else {
                System.out.printf("Echoed %d bytes from %s\n", readBytes, client.getRemoteSocketAddress());
                client.getOutputStream().write(buffer, 0, readBytes);
                client.getOutputStream().flush();
            }
        }
    }
}
