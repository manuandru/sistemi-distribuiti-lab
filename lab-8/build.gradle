plugins {
    id 'java-library'
    alias(libs.plugins.protobuf)
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/maven2/" }
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation(libs.grpc.protobuf)
    implementation(libs.grpc.stub)
    compileOnly(libs.tomcat.annotations)

    // examples/advanced need this for JsonFormat
    implementation(libs.protobuf.java)

    runtimeOnly(libs.grpc.netty.shaded)

    testImplementation(libs.grpc.testing)
    testImplementation(libs.junit)
}

protobuf {
    protoc { artifact = libs.protobuf.protoc.get() }
    plugins {
        grpc { artifact = libs.grpc.generator.java.get() }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

java {
    targetCompatibility = JavaVersion.VERSION_11
    sourceCompatibility = JavaVersion.VERSION_11
}

def greeting(klass) {
    return "it.unibo.ds.grpc.greeting.$klass"
}

task runService(type: JavaExec) {
    group = "application"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    mainClass.set(greeting("Service"))
}

task runClient(type: JavaExec) {
    group = "application"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    mainClass.set(greeting("Client"))
}
